const gulp = require('gulp');
const del = require('del');
const eslint = require('gulp-eslint');
const gulpif = require('gulp-if');
const htmlhint = require('gulp-htmlhint');
const less = require('gulp-less');
const gutil = require('gulp-util');
const autoprefixer = require('gulp-autoprefixer');
const cleanCSS = require('gulp-clean-css');
const uglify = require('gulp-uglify');
const concat = require('gulp-concat');
const browserify = require('browserify');
const buffer = require('vinyl-buffer');
const source = require('vinyl-source-stream');
const fs = require('fs');
const pcTPList = require('./web/static/tp/pc-tp-list');
const config = require('./config/config');
const jest = require('jest-cli');
const runSequence = require('run-sequence');
const babelify = require('babelify');

const isProdMode = process.env.NODE_ENV === 'production';

// Views
gulp.task('views', function(){
  return gulp.src(['web/views/**/*.html'])
    .pipe(htmlhint({
      'doctype-first': false
    }))
    .pipe(htmlhint.failReporter())
    .pipe(gulp.dest('web/static/compiled/views'));
});

// Stylesheets
gulp.task('stylesheets', function(){
  return gulp.src(['web/stylesheets/**/*.less'])
    .pipe(less({
      paths: ['./web']
    }))
    .on('error', gutil.log)
    .pipe(autoprefixer({browsers: ['> 1% in CN'], cascade: false}))
    .pipe(gulpif(isProdMode, cleanCSS()))
    .pipe(gulp.dest('web/static/compiled/stylesheets'));
});

gulp.task('lint', function() {
  return gulp.src(['**/*.js','!node_modules/**', '!web/static/**', '!coverage/**'])
    .pipe(eslint())
    .pipe(eslint.format())
    .pipe(eslint.failAfterError());
});

//PC Scripts
gulp.task('pc_scripts', ['pc_lib'], function() {
  return browserify({
    entries: ['./web/components/pc/reaclate.jsx'],
    transform: [babelify],
    extensions: ['.jsx']
  }).bundle()
    .pipe(source('reaclate.js'))
    .pipe(buffer())
    .pipe(gulpif(isProdMode, uglify({
      mangle: false
    })))
    .pipe(gulp.dest('./web/static/compiled/scripts/pc'));
});

gulp.task('isomorphic_components', function() {
  return browserify({
    entries: ['./web/components/pc/isomorphic/components.js'],
    transform: [babelify],
    extensions: ['.jsx'],
    standalone: 'WebComponents'
  }).bundle()
    .pipe(source('isomorphic_components.js'))
    .pipe(buffer())
    .pipe(gulpif(isProdMode, uglify({
      mangle: false
    })))
    .pipe(gulp.dest('./web/static/compiled/scripts/pc'));
});

gulp.task('app_components', function() {
  return browserify({
    entries: ['./web/components/pc/all/routes.jsx'],
    transform: [babelify],
    extensions: ['.jsx'],
    standalone: 'AppComponents'
  }).bundle()
    .pipe(source('app_components.js'))
    .pipe(buffer())
    .pipe(gulpif(isProdMode, uglify({
      mangle: false
    })))
    .pipe(gulp.dest('./web/static/compiled/scripts/pc'));
});

// Third party libraries for PC script.
gulp.task('pc_lib', ['pc_lib_map'], function(){
  return gulp.src(pcTPList.lib)
    .pipe(gulpif(isProdMode, uglify({
      mangle: false,
      compress: true
    })))
    .pipe(concat('reaclate.lib.js'))
    .pipe(gulp.dest('web/static/compiled/scripts/pc'));
});
//Third party libraries map for PC script.
gulp.task('pc_lib_map', function(){
  var glob = gulp.src(pcTPList.map);
  if (!isProdMode) {
    return glob.pipe(gulp.dest('web/static/compiled/scripts/pc'));
  } else {
    return glob;
  }
});

gulp.task('test', function(callback) {
  process.env.DEBUG = 'test';
  jest.runCLI({}, __dirname, function(result) {
    if (!result) {
      gutil.log('FAIL - Jest tests failed!');
      return process.exit(1);
    }
    callback();
  });
});

// Clean
gulp.task('clean', function(cb) {
  del(['web/static/compiled/views', 'web/static/compiled/stylesheets', 'web/static/compiled/scripts']).then(function(){
    cb();
  });
});

// Default task
gulp.task('default', ['clean'], function() {
  config.load(function(obj) {
    var content = '//This file is dynamically generated by config.properties. Please do not change. \n';
    var constants = content + 'exports.API_X = \'' + obj.API_X + '\';';
    fs.writeFileSync('config/constants.js', constants);

    runSequence(['views', 'stylesheets', 'lint'], ['pc_scripts', 'isomorphic_components', 'app_components'], function() {
      gulp.start('test');
    });
  });
});

gulp.task('watch', ['default'], function() {
  gulp.watch(['web/stylesheets/**/*.less'], ['stylesheets']);
  gulp.watch(['web/components/**/*.js', 'web/components/**/*.jsx'], ['scripts']);
  gulp.watch('web/views/*.html', ['views']);
});
